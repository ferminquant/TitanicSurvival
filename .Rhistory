cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
library(h2o)
library(parallel)
#localH2O = h2o.init(nthreads=detectCores()-1)
data = read.csv("train.csv", header = TRUE)
data$Age = ifelse(is.na(data$Age), -1, data$Age)
hdata = as.h2o(data)
hdata$Survived = as.factor(hdata$Survived)
hdata = hdata[-c(1,4,9,11)]
hdata_split = h2o.splitFrame(hdata, ratios = c(0.1))
hdata_test = hdata_split[[1]]
hdata_train = hdata_split[[2]]
acc_dist_test = NULL
acc_dist_cv = NULL
for (i in 1:100) {
acc_dist_test[i] = 0
acc_dist_cv[i] = 0
}
i = 0
min_err = 10000
min_cv_err = 10000
for (i in 1:1000) {
#while (TRUE) {
#  i = i + 1
rand_ntrees = sample(1:128,1)
rand_max_depth = sample(1:128,1)
rand_mtries = sample(1:7,1)
RF = h2o.randomForest(x=2:8,y=1,training_frame=hdata_train,
validation_frame=hdata_test,
nfolds=10,
ntrees=rand_ntrees,
max_depth=rand_max_depth,
mtries=rand_mtries
)
tmp = length(RF@model$scoring_history$validation_classification_error)
err = RF@model$scoring_history$validation_classification_error[tmp]
cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
h2o.shutdown(FALSE)
localH2O = h2o.init(nthreads=detectCores()-1)
i
sum(acc_dist_test)
library(h2o)
library(parallel)
#localH2O = h2o.init(nthreads=detectCores()-1)
data = read.csv("train.csv", header = TRUE)
data$Age = ifelse(is.na(data$Age), -1, data$Age)
hdata = as.h2o(data)
hdata$Survived = as.factor(hdata$Survived)
hdata = hdata[-c(1,4,9,11)]
hdata_split = h2o.splitFrame(hdata, ratios = c(0.1))
hdata_test = hdata_split[[1]]
hdata_train = hdata_split[[2]]
# acc_dist_test = NULL
# acc_dist_cv = NULL
# for (i in 1:100) {
#   acc_dist_test[i] = 0
#   acc_dist_cv[i] = 0
# }
# i = 0
# min_err = 10000
# min_cv_err = 10000
for (i in 148:1000) {
#while (TRUE) {
#  i = i + 1
rand_ntrees = sample(1:128,1)
rand_max_depth = sample(1:128,1)
rand_mtries = sample(1:7,1)
RF = h2o.randomForest(x=2:8,y=1,training_frame=hdata_train,
validation_frame=hdata_test,
nfolds=10,
ntrees=rand_ntrees,
max_depth=rand_max_depth,
mtries=rand_mtries
)
tmp = length(RF@model$scoring_history$validation_classification_error)
err = RF@model$scoring_history$validation_classification_error[tmp]
cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
h2o.shutdown(FALSE)
localH2O = h2o.init(nthreads=detectCores()-1)
NROW(acc_dist)
sum(acc_dist)
sum(acc_dist_test)
sum(acc_dist_cv)
library(h2o)
library(parallel)
#localH2O = h2o.init(nthreads=detectCores()-1)
data = read.csv("train.csv", header = TRUE)
data$Age = ifelse(is.na(data$Age), -1, data$Age)
hdata = as.h2o(data)
hdata$Survived = as.factor(hdata$Survived)
hdata = hdata[-c(1,4,9,11)]
hdata_split = h2o.splitFrame(hdata, ratios = c(0.1))
hdata_test = hdata_split[[1]]
hdata_train = hdata_split[[2]]
# acc_dist_test = NULL
# acc_dist_cv = NULL
# for (i in 1:100) {
#   acc_dist_test[i] = 0
#   acc_dist_cv[i] = 0
# }
# i = 0
# min_err = 10000
# min_cv_err = 10000
for (i in 352:1000) {
#while (TRUE) {
#  i = i + 1
rand_ntrees = sample(1:128,1)
rand_max_depth = sample(1:128,1)
rand_mtries = sample(1:7,1)
RF = h2o.randomForest(x=2:8,y=1,training_frame=hdata_train,
validation_frame=hdata_test,
nfolds=10,
ntrees=rand_ntrees,
max_depth=rand_max_depth,
mtries=rand_mtries
)
tmp = length(RF@model$scoring_history$validation_classification_error)
err = RF@model$scoring_history$validation_classification_error[tmp]
cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
h2o.shutdown(FALSE)
localH2O = h2o.init(nthreads=detectCores()-1)
sum(acc_dist_cv)
library(h2o)
library(parallel)
#localH2O = h2o.init(nthreads=detectCores()-1)
data = read.csv("train.csv", header = TRUE)
data$Age = ifelse(is.na(data$Age), -1, data$Age)
hdata = as.h2o(data)
hdata$Survived = as.factor(hdata$Survived)
hdata = hdata[-c(1,4,9,11)]
hdata_split = h2o.splitFrame(hdata, ratios = c(0.1))
hdata_test = hdata_split[[1]]
hdata_train = hdata_split[[2]]
# acc_dist_test = NULL
# acc_dist_cv = NULL
# for (i in 1:100) {
#   acc_dist_test[i] = 0
#   acc_dist_cv[i] = 0
# }
# i = 0
# min_err = 10000
# min_cv_err = 10000
for (i in 549:1000) {
#while (TRUE) {
#  i = i + 1
rand_ntrees = sample(1:128,1)
rand_max_depth = sample(1:128,1)
rand_mtries = sample(1:7,1)
RF = h2o.randomForest(x=2:8,y=1,training_frame=hdata_train,
validation_frame=hdata_test,
nfolds=10,
ntrees=rand_ntrees,
max_depth=rand_max_depth,
mtries=rand_mtries
)
tmp = length(RF@model$scoring_history$validation_classification_error)
err = RF@model$scoring_history$validation_classification_error[tmp]
cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
h2o.shutdown(FALSE)
sum(acc_dist_cv)
localH2O = h2o.init(nthreads=detectCores()-1)
library(h2o)
library(parallel)
#localH2O = h2o.init(nthreads=detectCores()-1)
data = read.csv("train.csv", header = TRUE)
data$Age = ifelse(is.na(data$Age), -1, data$Age)
hdata = as.h2o(data)
hdata$Survived = as.factor(hdata$Survived)
hdata = hdata[-c(1,4,9,11)]
hdata_split = h2o.splitFrame(hdata, ratios = c(0.1))
hdata_test = hdata_split[[1]]
hdata_train = hdata_split[[2]]
# acc_dist_test = NULL
# acc_dist_cv = NULL
# for (i in 1:100) {
#   acc_dist_test[i] = 0
#   acc_dist_cv[i] = 0
# }
# i = 0
# min_err = 10000
# min_cv_err = 10000
for (i in 751:1000) {
#while (TRUE) {
#  i = i + 1
rand_ntrees = sample(1:128,1)
rand_max_depth = sample(1:128,1)
rand_mtries = sample(1:7,1)
RF = h2o.randomForest(x=2:8,y=1,training_frame=hdata_train,
validation_frame=hdata_test,
nfolds=10,
ntrees=rand_ntrees,
max_depth=rand_max_depth,
mtries=rand_mtries
)
tmp = length(RF@model$scoring_history$validation_classification_error)
err = RF@model$scoring_history$validation_classification_error[tmp]
cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
h2o.shutdown(FALSE)
sum(acc_dist_cv)
localH2O = h2o.init(nthreads=detectCores()-1)
library(h2o)
library(parallel)
#localH2O = h2o.init(nthreads=detectCores()-1)
data = read.csv("train.csv", header = TRUE)
data$Age = ifelse(is.na(data$Age), -1, data$Age)
hdata = as.h2o(data)
hdata$Survived = as.factor(hdata$Survived)
hdata = hdata[-c(1,4,9,11)]
hdata_split = h2o.splitFrame(hdata, ratios = c(0.1))
hdata_test = hdata_split[[1]]
hdata_train = hdata_split[[2]]
# acc_dist_test = NULL
# acc_dist_cv = NULL
# for (i in 1:100) {
#   acc_dist_test[i] = 0
#   acc_dist_cv[i] = 0
# }
# i = 0
# min_err = 10000
# min_cv_err = 10000
for (i in 937:1000) {
#while (TRUE) {
#  i = i + 1
rand_ntrees = sample(1:128,1)
rand_max_depth = sample(1:128,1)
rand_mtries = sample(1:7,1)
RF = h2o.randomForest(x=2:8,y=1,training_frame=hdata_train,
validation_frame=hdata_test,
nfolds=10,
ntrees=rand_ntrees,
max_depth=rand_max_depth,
mtries=rand_mtries
)
tmp = length(RF@model$scoring_history$validation_classification_error)
err = RF@model$scoring_history$validation_classification_error[tmp]
cv_err = as.numeric(RF@model$cross_validation_metrics_summary[3,1])
j = round((1-err)*100,0)
acc_dist_test[j] = acc_dist_test[j]+1
j = round((1-cv_err)*100,0)
acc_dist_cv[j] = acc_dist_cv[j]+1
if (err < min_err) {
min_err = err
tmp_err_cv = cv_err
bestRF = RF
tmp_i = i
tmp_ntrees = rand_ntrees
tmp_max_depth = rand_max_depth
tmp_mtries = rand_mtries
}
if (cv_err < min_cv_err) {
min_cv_err = cv_err
cv_err_test = err
bestRFcv = RF
cv_i = i
cv_ntrees = rand_ntrees
cv_max_depth = rand_max_depth
cv_mtries = rand_mtries
}
print(sprintf("  Current params: %i | %f | %f | %i | %i | %i ", i, 1-err, 1-cv_err, rand_ntrees, rand_max_depth, rand_mtries))
print(sprintf("Best test params: %i | %f | %f | %i | %i | %i ", tmp_i, 1-min_err, 1-tmp_err_cv, tmp_ntrees, tmp_max_depth, tmp_mtries))
print(sprintf("  Best cv params: %i | %f | %f | %i | %i | %i ", cv_i, 1-cv_err_test, 1-min_cv_err, cv_ntrees, cv_max_depth, cv_mtries))
}
#h2o.shutdown(FALSE)
summary(bestRF)
1-0.187657
1-0.072165
1-0.207809
summary(bestRFcv)
1-0.161090
1-0.273810
1-0.143742
acc_dist_test
acc_dist_cv
h2o.shutdown(FALSE)
bestRF
localH2O = h2o.init(nthreads=detectCores()-1)
?hist
ggplot(dat, aes(x=acc_dist_test, y=count, fill=Level.of.Education)) +
geom_bar(stat='identity')
library(ggplot)
install.packages('ggplot')
library(ggplot)
library(ggplot2)
ggplot(dat, aes(x=acc_dist_test, y=count, fill=Level.of.Education)) +
geom_bar(stat='identity')
qplot(mtcars$mpg, fill = mtcars$cyl, binwidth = 2)
head(acc_dist_test)
qplot(acc_dist_test)
acc_dist_test[acc_dist_test > 0]
qplot(acc_dist_test[acc_dist_test > 0])
?qplot
barplot(acc_dist_test)
acc_dist_test
?barplot
barplot(acc_dist_test, space=0s)
barplot(acc_dist_test, space=0)
acc_dist_test/sum(acc_dist_test)
acc_dist_test/sum(acc_dist_test)*100
barplot(acc_dist_test/sum(acc_dist_test)*100)
barplot(acc_dist_test/sum(acc_dist_test)*100, space=0)
barplot(acc_dist/sum(acc_dist)*100, space=0)
(acc_dist/sum(acc_dist)*100, space=0)
acc_dist/sum(acc_dist)*100
barplot(acc_dist_test/sum(acc_dist_test)*100, space=0)
?barplot
barplot(acc_dist_test/sum(acc_dist_test)*100, space=0, xlab = "Model Accuracy", ylab = "% of models")
barplot(acc_dist_cv/sum(acc_dist_cv)*100, space=0, xlab = "Model Accuracy", ylab = "% of models")
for (i in 1:100){
if (acc_dist_test[i] > 0){
print(acc_dist_test[i])
}
}
for (i in 1:100){
if (acc_dist_test[i] > 0){
print(sprinf("%i | %f",i,acc_dist_test[i])
}
}
print(sprinf("%i | %f",i,acc_dist_test[i]))
for (i in 1:100){
if (acc_dist_test[i] > 0){
print(sprinf("%i | %f",i,acc_dist_test[i]))
}
}
for (i in 1:100){
if (acc_dist_test[i] > 0){
print(sprintf("%i | %f",i,acc_dist_test[i]))
}
}
for (i in 1:100){
if (acc_dist_test[i] > 0){
print(sprintf("%i | %f%%",i,acc_dist_test[i]/sum(acc_dist_test)*100))
}
}
for (i in 1:100){
if (acc_dist_cv[i] > 0){
print(sprintf("%i | %f%%",i,acc_dist_cv[i]/sum(acc_dist_cv)*100))
}
}
#Load and prepare
test = read.csv("test.csv", header = TRUE)
test$Age = ifelse(is.na(test$Age), -1, test$Age)
htest2 = as.h2o(test)
htest = htest2[-c(1,3,8,10)]
htest2$Survived = as.numeric(h2o.predict(bestRF,htest2)$predict)
bestRF
htest2$Survived = as.numeric(h2o.predict(bestRF,htest)$predict)
htest2$Survived = as.numeric(h2o.predict(bestRFcv,htest2)$predict)
h2o.saveModel(bestRF, path=getwd(), force=T)
localH2O
h2o.shutdown(FALSE)
